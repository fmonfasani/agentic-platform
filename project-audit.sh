#!/usr/bin/env bash
echo "üîç Iniciando auditor√≠a del proyecto..."

# 1. Info b√°sica
echo "üìÅ Directorio actual: $(pwd)"
echo "üß± Node version: $(node -v)"
echo "üì¶ PNPM version: $(pnpm -v)"

# 2. Mostrar estructura principal
echo "üìÇ Estructura del proyecto (nivel 2):"
tree -L 5 -I 'node_modules|dist|.git'
find . -maxdepth 5 -type d | sed 's/[^-][^\/]*\//--/g;s/^/   /'



# 3. Detectar archivos TypeScript con errores
echo "üß™ Verificando errores de compilaci√≥n TypeScript..."
pnpm tsc --noEmit --pretty || echo "‚ö†Ô∏è Errores de compilaci√≥n detectados."

# 4. Verificar dependencias faltantes
echo "üì¶ Buscando dependencias faltantes..."
pnpm install --check-files --prefer-offline --reporter=silent > /dev/null 2>&1
missing=$(pnpm list --depth -1 2>&1 | grep "missing" || true)
if [ -n "$missing" ]; then
  echo "‚ùå M√≥dulos faltantes:"
  echo "$missing"
else
  echo "‚úÖ Todas las dependencias est√°n presentes."
fi

# 5. Verificar inconsistencias en workspace
echo "üß© Verificando inconsistencias en el monorepo..."
pnpm dedupe --check

# 6. Analizar scripts y configuraciones clave
echo "‚öôÔ∏è Scripts definidos en package.json:"
jq '.scripts' package.json

echo "üìò Configuraci√≥n TypeScript (tsconfig.build.json):"
jq '.compilerOptions' tsconfig.build.json

# 7. Revisar archivos prisma
if [ -d "apps/api/prisma" ]; then
  cd apps/api && npx prisma validate && cd ../..
else
  echo "‚ö†Ô∏è No se encontr√≥ carpeta prisma/"
fi


# 8. Revisar variables de entorno
echo "üîê Variables de entorno necesarias:"
grep -E "^[A-Z_]+=" .env.example 2>/dev/null || echo "‚ö†Ô∏è No se encontr√≥ .env.example"

echo "‚úÖ Auditor√≠a completa."
