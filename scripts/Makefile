# ================================
# AGENTIC PLATFORM AUTOMATION
# ================================

# ================================
# üß† Detect environment (WSL vs Git Bash)
# ================================

# Detect if running under WSL
ifeq ($(shell uname -r | grep -i microsoft),)
    ENVIRONMENT := bash
else
    ENVIRONMENT := wsl
endif

# Choose Python executable accordingly
ifeq ($(ENVIRONMENT),wsl)
    PYTHON := python3
else
    PYTHON := python
endif

# Log info
$(info üß† Entorno detectado: $(ENVIRONMENT))
$(info üêç Usando int√©rprete: $(PYTHON))


# Variables
BACKEND_DIR := scripts/agentic_autopilot/loops/backend
API_DIR := apps/api
WEB_DIR := apps/web

# ================================
# Base targets
# ================================

help:
	@echo "üß† Available commands:"
	@echo "  make repair-backend      ‚Üí Ejecuta los agentes que reparan el backend"
	@echo "  make repair-web          ‚Üí Ejecuta los agentes que reparan el frontend"
	@echo "  make diagnostics          ‚Üí Corre diagn√≥sticos generales del sistema"
	@echo "  make start-api            ‚Üí Levanta el backend NestJS"
	@echo "  make start-web            ‚Üí Levanta el frontend Next.js"
	@echo "  make test-backend         ‚Üí Ejecuta los tests del backend"

# ================================
# Repair routines
# ================================

fix-back:
	@echo "üõ† Ejecutando agentes de reparaci√≥n del backend..."
	@$(PYTHON) $(BACKEND_DIR)/repair_loop_api.py
	@$(PYTHON) $(BACKEND_DIR)/repair_loop_db.py
	@$(PYTHON) $(BACKEND_DIR)/repair_loop_docs.py
	@$(PYTHON) $(BACKEND_DIR)/repair_loop_master.py
	@echo "‚úÖ Backend reparado con √©xito."

fix-web:
	@echo "üß© Ejecutando agentes de reparaci√≥n del frontend..."
	@$(PYTHON) scripts/agentic_autopilot/loops/frontend/repair_loop_web_v0.4.py
	@echo "‚úÖ Frontend reparado con √©xito."

diagnostics:
	@echo "üîç Ejecutando diagn√≥stico general..."
	@$(PYTHON) scripts/agent-diagnostics.ts || echo "Node diagnostic script fallback"
	@echo "‚úÖ Diagn√≥stico completado."

# ================================
# Run targets
# ================================

start-api:
	cd $(API_DIR) && pnpm start

start-web:
	cd $(WEB_DIR) && pnpm dev

test-backend:
	cd $(API_DIR) && pnpm test


# ===============================
# üß† GIT AUTOPILOT MODULE
# ===============================
GIT_AGENT_DIR := ./agentic_autopilot/agents/git_agent
## üîç Diagn√≥stico del estado del repositorio
git-auto:

	@echo " Ejecutando  diagnositico de git y viendo soluciones"
	@$(PYTHON) $(GIT_AGENT_DIR)/git_autopilot.py

git-di:
	@echo "üîç Ejecutando diagn√≥stico de Git..."
	@python3 $(GIT_AGENT_DIR)/git_health.py

## üîß Reparaci√≥n autom√°tica (fetch, merge, rebase, push)
repair-git:
	@echo "üß† Ejecutando reparaci√≥n de Git..."
	@python3 $(GIT_AGENT_DIR)/git_repair.py

## üßæ Generar reporte Markdown de estado del repositorio
report-git:
	@echo "üìÑ Generando reporte de Git..."
	@python3 $(GIT_AGENT_DIR)/git_status_reporter.py

## ü§ñ Commit autom√°tico con IA (si OPENAI_API_KEY est√° configurada)
ai-commit:
	@echo "ü§ñ Generando mensaje de commit con IA..."
	@DIFF="$$(git diff --cached)" && \
	python3 -c "from agentic_autopilot.git_agent.git_commit_ai import ai_commit_message; \
	print(ai_commit_message('''$$DIFF'''))"
